<%= stylesheet_link_tag 'secret_new', media: 'all' %>
<% content_for :title, t('.title') %>

<div class="new-secret-page">
  <div>
    <%= link_to secrets_path, class: 'return-link' do %>
      &#8592; <%= t('secrets.back-link') %>
    <% end %>
  </div>

  <h1 class="page-header"><%= t('.new') %></h1>

  <div class="form-layout">
    <div class="form-column">
      <%= render "form", secret: @secret %>
    </div>

    <div class="map-section">
      <div id="map"></div>
    </div>
  </div>
</div>

<script>
  let map;
  let marker;

  function initMap() {
    const mapElement = document.getElementById("map");
    const latitudeField = document.getElementById("latitudeField");
    const longitudeField = document.getElementById("longitudeField");
    const addressField = document.getElementById("addressField");

    const defaultLocation = { lat: 50.8503, lng: 4.3517 }; // Brussels as default
    const geocoder = new google.maps.Geocoder();

    // Attempt to determine the user's location
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const userLocation = {
            lat: position.coords.latitude,
            lng: position.coords.longitude,
          };
          initializeMap(userLocation);
        },
        () => {
          console.warn("Geolocation failed. Using default location.");
          initializeMap(defaultLocation);
        }
      );
    } else {
      console.warn("Geolocation not supported. Using default location.");
      initializeMap(defaultLocation);
    }

    // Function to initialize the map
    function initializeMap(center) {
      map = new google.maps.Map(mapElement, {
        center: center,
        zoom: 15,
      });

      // Place a marker at the center
      placeMarker(center);

      // Add a click listener to the map
      map.addListener("click", (event) => {
        const clickedLocation = event.latLng;

        // Place a marker at the clicked location
        placeMarker(clickedLocation);

        // Update latitude, longitude, and address fields
        latitudeField.value = clickedLocation.lat().toFixed(6);
        longitudeField.value = clickedLocation.lng().toFixed(6);
        fetchAddress(clickedLocation.lat(), clickedLocation.lng(), addressField);
      });
    }

    // Function to place or move the marker
    function placeMarker(location) {
      if (marker) marker.setMap(null);
      marker = new google.maps.Marker({
        position: location,
        map: map,
      });
    }

    // Fetch the address using Google Geocoding API
    function fetchAddress(lat, lng, addressField) {
      geocoder.geocode({ location: { lat: lat, lng: lng } }, (results, status) => {
        if (status === "OK" && results[0]) {
          addressField.value = results[0].formatted_address;
        } else {
          addressField.value = "Address not found";
          console.error("Geocoder failed: " + status);
        }
      });
    }
  }
</script>

<script async src="https://maps.googleapis.com/maps/api/js?key=<%= Rails.application.credentials.dig('GOOGLE_MAPS_API_KEY') %>&callback=initMap&libraries=places"></script>
