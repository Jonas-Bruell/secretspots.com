<%= stylesheet_link_tag 'secret_new', media: 'all' %>

<% content_for :title, t('.title') %>

<div class="new-secret-page">
  
  <div>
    <%= link_to secrets_path, class: 'return-link' do %>
      &#8592; <%= t('secrets.back-link') %>
    <% end %>
  </div>

  
  <h1 class="page-header"><%= t('.edit') %></h1>

 
  <div class="form-layout">
  
    <div class="form-column">
      <%= render "form", secret: @secret %>
    </div>

   
    <div class="map-section">
      <div id="map"></div>
    </div>
  </div>
</div>

<script>
  let map;
  let marker;

  function initMap() {
    const mapElement = document.getElementById("map");
    const latitudeField = document.getElementById("secret_latitude");
    const longitudeField = document.getElementById("secret_longitude");
    const addressField = document.getElementById("secret_address");

    const currentLat = parseFloat(latitudeField.value) || 50.8503; // Default to Brussels if empty
    const currentLng = parseFloat(longitudeField.value) || 4.3517;

    const mapOptions = {
      center: { lat: currentLat, lng: currentLng },
      zoom: 12,
    };

    map = new google.maps.Map(mapElement, mapOptions);

    marker = new google.maps.Marker({
      position: { lat: currentLat, lng: currentLng },
      map: map,
      draggable: true,
    });

    google.maps.event.addListener(marker, "dragend", function (event) {
      const position = marker.getPosition();
      latitudeField.value = position.lat().toFixed(6);
      longitudeField.value = position.lng().toFixed(6);

      fetchAddress(position.lat(), position.lng(), addressField);
    });
  }

  function fetchAddress(lat, lng, addressField) {
    const geocoder = new google.maps.Geocoder();
    const latlng = { lat: parseFloat(lat), lng: parseFloat(lng) };

    geocoder.geocode({ location: latlng }, (results, status) => {
      if (status === "OK" && results[0]) {
        addressField.value = results[0].formatted_address;
      } else {
        addressField.value = "Address not found";
      }
    });
  }
</script>

<script async
  src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAPS_API_KEY'] %>&callback=initMap&libraries=places"></script>
