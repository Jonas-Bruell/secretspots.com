<%= stylesheet_link_tag 'homepage', media: 'all' %>

<h1 class="page-title">
  <%= t('global.secrets') %>
</h1>

<div id="map_home" style="width: 100%; height: 400px; border: 1px solid #ddd; border-radius: 5px; margin-bottom: 20px;"></div>

<div class="controls-container" style="display: flex; flex-wrap: wrap; gap: 20px; align-items: center; margin-bottom: 20px;">

  <div class="radius-adjustment">
    <label for="radiusSlider_home" class="radius-label">Adjust Radius (km):</label>
    <input id="radiusSlider_home" type="range" min="1" max="10" value="1" step="0.1" 
           oninput="mapHomeUpdateRadius(this.value)">
    <span id="radiusValue_home" style="font-weight: bold;">1 km</span>
  </div>

  <div class="filter-container">
    <label style="font-weight: bold; margin-right: 10px;">Filter by Tags:</label>
    <div style="display: flex; gap: 15px; flex-wrap: wrap;">
      <% SecretTag::VALID_TAGS.each do |tag| %>
        <label style="display: flex; align-items: center;">
          <input type="checkbox" class="tag-filter-home" value="<%= tag %>" onchange="mapHomeFilterMarkers()"> <%= tag %>
        </label>
      <% end %>
    </div>
  </div>
</div>

<script>
  let mapHome; 
  let circleHome; 
  let allSecretsHome = []; 
  let markersHome = []; 

  function mapHomeInit() {
    homeGetGeolocation();
  }

  function homeGetGeolocation() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const userLocationHome = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };
          mapHomeCreate(userLocationHome);
        },
        () => {
          console.warn("Geolocation failed. Using default center.");
          const defaultLocationHome = { lat: 50.8503, lng: 4.3517 };
          mapHomeCreate(defaultLocationHome);
        }
      );
    } else {
      console.warn("Geolocation not supported. Using default center.");
      const defaultLocationHome = { lat: 50.8503, lng: 4.3517 };
      mapHomeCreate(defaultLocationHome);
    }
  }

  function mapHomeCreate(centerLocationHome) {
    mapHome = new google.maps.Map(document.getElementById("map_home"), {
      center: centerLocationHome,
      zoom: 14,
      streetViewControl: false,
    });

    circleHome = new google.maps.Circle({
      strokeColor: "#2A7FFF",
      strokeOpacity: 0.8,
      strokeWeight: 2,
      fillColor: "#2A7FFF",
      fillOpacity: 0.2,
      map: mapHome,
      center: centerLocationHome,
      radius: 1000, 
    });

    mapHomeFetchSecrets();
  }

  function mapHomeFetchSecrets() {
    fetch("<%= secrets_map_data_path %>")
      .then(response => response.json())
      .then(data => {
        allSecretsHome = data; 
        mapHomeAddMarkers();
      })
      .catch(error => console.error("Error fetching secrets:", error));
  }

  function mapHomeAddMarkers() {
    markersHome = allSecretsHome.map(secret => {
      const position = { lat: parseFloat(secret.latitude), lng: parseFloat(secret.longitude) };

      const marker = new google.maps.Marker({
        position: position,
        title: secret.name,
        map: mapHome,
      });

      marker.addListener("click", () => {
        window.location.href = `/secrets/${secret.id}`;
      });

      return { marker, tags: secret.secret_tags || [], position: position };
    });

    mapHomeFilterMarkers();
  }

  function mapHomeFilterMarkers() {
    const selectedTags = Array.from(document.querySelectorAll(".tag-filter-home:checked")).map(tag => tag.value);

    markersHome.forEach(({ marker, tags, position }) => {
      const distance = google.maps.geometry.spherical.computeDistanceBetween(
        position,
        circleHome.getCenter()
      );

      const withinRadius = distance <= circleHome.getRadius();

      const hasNoTags = tags.length === 0;
      const matchesTag = selectedTags.length === 0 || 
        (hasNoTags && selectedTags.includes("Not-tagged")) || 
        tags.some(tag => selectedTags.includes(tag));

      if (matchesTag && withinRadius) {
        marker.setMap(mapHome); 
      } else {
        marker.setMap(null); 
      }
    });
  }

  function mapHomeUpdateRadius(value) {
    const radiusInMeters = value * 1000;
    circleHome.setRadius(radiusInMeters);
    document.getElementById("radiusValue_home").textContent = `${value} km`;

    mapHomeFilterMarkers();
  }

  document.addEventListener("DOMContentLoaded", mapHomeInit);
</script>

<script async defer 
  src="https://maps.googleapis.com/maps/api/js?key=<%= Rails.application.credentials.dig('GOOGLE_MAPS_API_KEY') %>&callback=mapHomeInit&libraries=places,geometry">
</script>
